Initial points of interest
	Data
		input formats?
			ESRI
			ENVI HDR
			Other raster formats (GeoTIFF etc)
			Custom
				binary?
					watch for endianess
		output formats?
		What data structures are used?
			What is the best way to translate them to numpy?
		Does the code need to explicitly deal with spatial aspects of the data (projections etc)?
			or does it just see an array of pixels
		How can I breakdown the large global data structure to be more modular?
			Identify coherent subsets of data required by the processing modules
	What are the plotting requirements?
		Should the plots be generated by Python at all?
		: Can I just write out to HDF using an appropriate convention(CF-1.2?),
		: and then use standard tools (ESRI, ENVI, Panoply) to visualise the
		: data?
		If plotting from Python, what library will I need?
			Matplotlib, Basemap, veusz...
	Processing:
		numpy, scipy
		does single or double precision matter?
	What IDL-specific capabilities are used that might be hard to substitute in Python?
IDL quirks to watch
	arrays
		IDL arrays are row-major, but differ from standard matrix notation by using (column, row) rather than (row, column)
		: so indexing looks like column-major but it's not. Rationale is that
		: memory layout for 2D images matches the data access ordering of device
		: scanlines
			will just have to watch indexing orders in Python
		array subscripts are 0-based (yeay)
		implicit array operations
		default is to use [] for array subscripts, but () is legal (and confusing since it looks like a function call)
	It looks like procedures don't have a return value, but functions do.
	dynamic typing
		values have a hard type (string, float, double etc)
		references can point to any type
		: So a='a' followed by a=3 does not change a string to an int. It just
		: changes the data type referenced by a
	data types
		default int is only 16 bits. Need long for 32 bits
		float (32 bits) and double (64 bits) make sense
